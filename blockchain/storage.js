// Generated by CoffeeScript 2.2.3
(function() {
    // Marketplace Client's levelup-based storage

  // TODO: how avoid CryptoJS?
  var CryptoJS, Storage, leveldown, levelup;

  CryptoJS = require("crypto-js");

  levelup = require("levelup");

  leveldown = require("leveldown");

  Storage = class Storage {
    constructor(root) {
      this.storage = levelup(leveldown(root));
      this.get("genesis", (err, tx) => {
        if (err === null && tx === null) {
          return this.put({
            id: "genesis"
          }, (err) => { // genesis block init
            return console.log("genesis: err=", err);
          });
        }
      });
    }

    calculateHash(record) {
      return CryptoJS.SHA256(JSON.stringify(record)).toString();
    }

    getGenesis() {
      var tx;
      tx = {};
      tx.id = "genesis";
      tx.prev_id = "genesis";
      tx.ts = Math.floor((new Date).getTime() / 1000);
      tx.hash = this.calculateHash(tx);
      return tx;
    }

    // get transaction from the store by 'key' id
    get(key, cb) {
      console.log(`get (${key}, <cb>)`);
      return this.storage.get(key, function(err, tx) {
        if (err) {
          if (err.notFound) {
            cb(null, null);
          } else {
            console.log('failed to read from storage:', err);
            cb(err);
          }
          return;
        }
        return cb(null, JSON.parse(tx));
      });
    }

    // gathering all txs for displaying under "My Transactions"
    getAll(cb) {
      var txAll;
      txAll = [];
      return this.storage.createReadStream().on('data', function(data) {
        var d, tx, v;
        tx = {};
        d = JSON.parse(data.value.toString());
        for (v in d) {
          tx[v] = d[v];
        }
        txAll.push(tx);
      }).on('end', function() {
        // console.log "all transactions:", txAll
        cb(null, txAll);
      });
    }

    // save transaction into the store
    put(tx, cb) {
      var _saveTx, key;
      console.log(`put (${JSON.stringify(tx)}, <cb>)`);
      key = tx.id;
      _saveTx = () => {
        return this.storage.put(key, JSON.stringify(tx), (err) => {
          if (err) {
            console.log('failed to write to storage:', err);
            cb(err);
            return;
          }
          return this.getAll(cb);
        });
      };
      if (key === "genesis") {
        tx = this.getGenesis();
        _saveTx();
        return;
      }
      // getting id of the latest transaction
      return this.storage.createReadStream({
        limit: 1
      }).on('error', (err) => {
        console.log('storage error:', err);
        cb(err);
      }).on('data', (data) => {
        console.log("latest:", data.key.toString(), '=', data.value.toString());
        tx.prev_id = data.key.toString();
        tx.hash = this.calculateHash(tx);
        console.log("saving tx:", JSON.stringify(tx));
        _saveTx();
      });
    }

  };

  module.exports = Storage;

}).call(this);
